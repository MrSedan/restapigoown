# This file is a template, and might need editing before it works on your project.
image: golang:latest

services:
  - postgres:latest
  - docker:dind

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/MrSedan1/go-rest-api
  POSTGRES_DB: myrest_test
  POSTGRES_USER: tester
  POSTGRES_PASSWORD: test

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - docker-test
  - build
  - deploy

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

docker-comp:
  stage: docker-test
  image: docker
  services:
    - docker:dind
  script:
    - apk add docker-compose --update-cache
    - docker-compose -f docker-compose.yml build

compile:
  stage: build
  script:
    - go build -race -ldflags "-extldflags '-static'" -v ./cmd/apiserver
  artifacts:
    paths:
      - apiserver

deploy-staging:
  stage: deploy
  image: docker
  services:
    - docker:dind
  script:
    - apk add docker-compose --update-cache
    - docker-compose -f docker-compose.yml down
    - docker-compose -f docker-compose.yml up -d
  only:
    - master